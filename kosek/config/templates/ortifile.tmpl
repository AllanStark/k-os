/*
**  k_os (Konnex Operating-System based on the OSEK/VDX-Standard).
**
**  (C) 2007-2013 by Christoph Schueler <github.com/Christoph2,
**                                       cpu12.gems@googlemail.com>
**
**  All Rights Reserved
**
**  This program is free software; you can redistribute it and/or modify
**  it under the terms of the GNU General Public License as published by
**  the Free Software Foundation; version 2 of the License.
**
**  This program is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
**  GNU General Public License for more details.
**
**  You should have received a copy of the GNU General Public License
**  along with this program; if not, write to the Free Software
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
**
**  s. FLOSS-EXCEPTION.txt
*/
<% import sys %>
/*
**
**  !!! AUTOMATICALLY GENERATED FILE - DO NOT EDIT !!!
**
**
**  GENERATED WITH  : '${sys.argv[0]}', Part of k_os (Konnex Operating-System based on the OSEK/VDX-Standard).
**  VERSION:        : ${info.version}
**  DATE            : ${time.ctime()}
**
*/


/*
**
**  Information Section.
**
*/
VERSION {
    KOIL        = "${info.koilVersion}";
    OSSEMANTICS = "ORTI", "${info.osekVersion}";
};


/*
**
**  Implementation Section.
**
*/
##slurp
##set $line = None
##set $num = 0
##errorCatcher Echo
IMPLEMENTATION ${info.vendor}_${info.version}_ORTI {
    OS {
        TOTRACE ENUM "uint8" [
<% values = ',\n'.join(map(lambda t: '            "%s" = %s' % (t[0], t[1]), ORTICfg.SERVICE_IDS)) %>
${values}
        ] SERVICETRACE, "OS Service Watches";

        ENUM "uint8" [
<% values = ',\n'.join(map(lambda n, t: '            "%s" = %u' % (t, (~n + 1) & 0x0f),
        range(len(info.priorityMap) + 1), ['NONE'] + map(lambda x: x, info.priorityMap))) %>
${values}
        ] RUNNINGTASKPRIORITY, "Priority of running Task";

        ENUM "uint8" [
<% values = ',\n'.join(map(lambda n, t: '            "%s" = %u' % (t, n),
        range(len(app.isrs) + 1), ['NONE'] + map(lambda x: x.name, app.isrs))) %>
${values}
        ] RUNNINGISR2, "Running ISR of category 2";

        ENUM "uint8" [
<% values = ',\n'.join(map(lambda t: '            "%s" = %u' % (t[0], t[1]), ORTICfg.STATUS_TYPES)) %>
${values}
        ] LASTERROR, "Last OSEK error";

        ENUM [
<% values = ',\n'.join(map(lambda n, t: '            "%s" = "%u"' % (t, n),
        range(len(app.tasks) + 1), ['IdleTask'] + map(lambda x: x.name, app.tasks))) %>
${values}
        ] RUNNINGTASK, "Running Task Identification";

        ENUM "uint8" [
            "DEFAULT APPMODE" = 0,
<% values = ',\n'.join(map(lambda n: '            "%s" = %s' %(n[1].name, n[0]), enumerate(app.appmodes, 1))) %>
${values}
        ] CURRENTAPPMODE, "Current application mode";

    }, "OS";

    TASK {
        ENUM "uint8" [
<% values = ',\n'.join(map(lambda n, t: '            "%s" = %u' % (t, (~n + 1) & 0x0f),
        range(len(info.priorityMap) + 1), ['NONE'] + map(lambda x: x, info.priorityMap))) %>
${values}
        ] PRIORITY, "Actual Priority";
        ENUM "uint8" [
            "SUSPENDED" = 0,
            "READY"     = 1,
            "RUNNING"   = 2,
            "WAITING"   = 3
        ] STATE, "Current Task State";
        ENUM "uint8 *" [
%for task in app.tasks:
            "Stack${loop.index}" : ${task.name}_Stack = "&(${task.name}_Stack[0])\
%if not loop.last:
,
%else:

%endif
%endfor
        ] STACK, "Task Stack";
        ENUM "uint8 *" [
%for task in app.tasks:
            "CONTEXT_${task.name}" : CONTEXT_${task.name} = ${loop.index}\
%if not loop.last:
,
%else:

%endif
%endfor
        ] CONTEXT, "Task Context";
        CTYPE "uint8" CURRENTACTIVATIONS, "Current Activations";
        STRING vs_Base_Priority, "Configured Base Priority";
        STRING vs_Schedule, "Schedule";
        STRING vs_Task_Type, "Task Type";
        CTYPE "uint8" vs_Events_Set, "Events Set";
        CTYPE "uint8" vs_Events_WaitingFor, "Events Waiting for";
    }, "Tasks";

    vs_COUNTER {
        CTYPE "TickType" vs_MAXALLOWEDVALUE, "Maximum possible allowed count value";
        CTYPE "TickType" vs_MINCYCLE, "Minimum allowed number of ticks for a cyclic alarm";
        CTYPE "TickType" vs_TICKSPERBASE, "Number of ticks required to reach a counter-specific";
        STRING vs_TYPE, "Type of counter";
        CTYPE "TickType" vs_CURRENTVALUE, "Current Value";
    }, "Counters";

    ALARM {
        CTYPE "TickType" ALARMTIME, "Alarm Time";
        CTYPE "TickType" CYCLETIME, "Cycle Time";
        ENUM [
            "STOPPED" = 0,
            "RUNNING" = 1
        ] STATE, "Alarm State";
        STRING ACTION, "associated Action";
        STRING COUNTER, "associated Counter";
    }, "Alarms";

    RESOURCE {
        ENUM "uint8" [
            "UNLOCKED"=0,
            "LOCKED"=1
        ] STATE, "Resource State";
        ENUM "uint8" [
            "NONE" = 0,
%for task in app.tasks:
            "${task.name}" = ${loop.index + 1}\
%if not loop.last:
,
%else:

%endif
%endfor
        ] LOCKER, "Resource Locker";
        STRING PRIORITY, "Ceiling priority";
    }, "Resources";

    CONTEXT {
%for name, type_ , _ in info.context:
        CTYPE "${type_}" _CPU_${name}, "CPU Register ${name}";
%endfor
        CTYPE "unsigned char" VALID;
    }, "Task Context";
    STACK {
        CTYPE "uint16" SIZE, "Stacksize in Bytes";
        CTYPE "uint16*" BASEADDRESS, "Base Address";
        STRING STACKDIRECTION, "Stack Direction";
        CTYPE "uint8" FILLPATTERN, "Stack Fill Pattern";
    }, "Stacks";
}; /* END OF IMPLEMENTATION */


/*
**
**  Information Section.
**
*/
OS ${info.vendor}_${info.version}_arch {
## ALL MISSING !!!
##    RUNNINGTASK         = "${osVars.runningTask}";
##    RUNNINGTASKPRIORITY = "${osVars.runningTaskPriority}";
##    RUNNINGISR2         = "${osVars.isrID}";
##    SERVICETRACE        = "${osVars.serviceID}";
##    LASTERROR           = "${osVars.lastError}";
##    CURRENTAPPMODE      = "${osVars.appMode}";
};

%for task in app.tasks:
TASK ${task.name} {
    PRIORITY            = "(OS_TCB[${loop.index + 1}].CurrentPriority)";
    STATE               = "(OS_TCB[${loop.index + 1}].State)";
    STACK               = "&(${task.name}_Stack[0])";
    CURRENTACTIVATIONS  = "(OS_TCB[${loop.index + 1}].Activations)";
    CONTEXT             = "${loop.index}";
##    vs_Base_Priority    = "${task.RELATIVE_PRIORITY}";        # MISSING!!!
    vs_Schedule         = "${task.SCHEDULE}";
    vs_Task_Type        = "${task.taskType}";
    vs_Events_WaitingFor= "(OS_TCB[${loop.index + 1}].EventsSet)";
    vs_Events_Set       = "(OS_TCB[${loop.index + 1}].EventsWaitingFor)";
};

STACK ${task.name}_Stack {
    SIZE                = "(OS_TaskConf[${loop.index + 1}].StackSize)";
    STACKDIRECTION      = "${info.stack.direction}";
    BASEADDRESS         = "&(${task.name}_Stack[0])";
    FILLPATTERN         = "${info.stack.fillpattern}";
};

CONTEXT CONTEXT_${task.name} {
%for name, type_, offs in info.context:
%if name == 'D':
    _CPU_${name} = "(${type_} ) ( (*(OS_TCB[${loop.index + 1}].Stackpointer + ${offs})) | (*(OS_TCB[${loop.index + 1}].Stackpointer + ${offs+1}) << 8 ) )";
%else:
    _CPU_${name} = "*(${type_} *)((uint8*)(OS_TCB[${loop.index + 1}].Stackpointer + ${offs}))";
%endif
%endfor
    VALID = "((OS_TCB[${loop.index + 1}].State!=SUSPENDED) && (OS_TCB[${loop.index + 1}].State != RUNNING))";
};

%endfor

%for counter in app.counters:
vs_COUNTER $(counter.name) {
    vs_MAXALLOWEDVALUE  = "${counter.MAXALLOWEDVALUE}";
    vs_MINCYCLE         = "${counter.MINCYCLE}";
    vs_TICKSPERBASE     = "${counter.TICKSPERBASE}";
    vs_CURRENTVALUE     = "Os_CounterValues[${loop.index}]";
    vs_TYPE             = "${counter.TYPE}\
%if counter.TYPE == 'HARDWARE':
 [Driver: ${counter.TYPE.DRIVER}]\
%endif
";
};

%endfor

%for alarm in app.alarms:
ALARM ${alarm.name} {
    ALARMTIME = "OS_AlarmValue[${loop.index}].ExpireCounter";
    CYCLETIME = "OS_AlarmValue[${loop.index}].CycleCounter";
    STATE     = "((OsAlm_ActiveAlarms & (1 << ${loop.index})) != 0) ? 1 : 0";
    ACTION    = "${alarmAction(alarm)}";
    COUNTER   = "${alarm.COUNTER}";
};

%endfor

%for res in app.standardResources:
RESOURCE ${res.name} {
## todo: Priority of Locker!
    PRIORITY = "TASK: ${res.relativeCeilingPriority}";
    LOCKER   = "Os_Resources[${loop.index}].Locker";
    STATE    = "Os_Resources[${loop.index}].Locker != INVALID_TASK";
};

%endfor

