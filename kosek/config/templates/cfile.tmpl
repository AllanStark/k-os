/*
**  k_os (Konnex Operating-System based on the OSEK/VDX-Standard).
**
**  (C) 2007-2013 by Christoph Schueler <github.com/Christoph2,
**                                       cpu12.gems@googlemail.com>
**
**  All Rights Reserved
**
**  This program is free software; you can redistribute it and/or modify
**  it under the terms of the GNU General Public License as published by
**  the Free Software Foundation; version 2 of the License.
**
**  This program is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
**  GNU General Public License for more details.
**
**  You should have received a copy of the GNU General Public License
**  along with this program; if not, write to the Free Software
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
**
**  s. FLOSS-EXCEPTION.txt
*/
<% import sys %>
/*
**
**  !!! AUTOMATICALLY GENERATED FILE - DO NOT EDIT !!!
**
**
**  GENERATED WITH  : '${sys.argv[0]}', Part of k_os (Konnex Operating-System based on the OSEK/VDX-Standard).
**  VERSION:        : ${info.version}
**  DATE            : ${time.ctime()}
**
*/
#include "Os_Cfg.h"
%if len(app.internalMessages) > 0 or len(app.externalMessages) > 0:
#include "Com.h"
%endif

/*
**
**  Tasks.
**
*/
##
##   Hinweis: ein reines Single-Stack-System benoetigt keinen seperaten Interrupt-Stack!!!
##
%for task in app.tasks:
uint8 ${task.name}_Stack[${task.name.upper()}_STACK_SIZE];
%endfor

uint8 ISR_Stack[ISR_STACK_SIZE];
uint8 IdleTask_Stack[IDLE_TASK_STACK_SIZE];

const OsTaskConfigurationType OS_TaskConf[OS_NUMBER_OF_TASKS] = {
{
    GetTaskName(OsExec_IdleTask),
    (uint8*)IdleTask_Stack,
    IDLE_TASK_STACK_SIZE,
    ((PriorityType)0),
    OS_TASK_ATTR_FULLPREEMPT,
    %if app.os.CC in ('BCC2','ECC2'):
    (uint8)1,
    %endif
%if len(app.autostartedTasks)>0:
    OS_AUTOSTART_ALWAYS,
%endif
#if defined(OS_USE_INTERNAL_RESOURCES)
    INTERNAL_RES_NONE,
#endif
},
%for task in app.tasks:
{
    GetTaskName(${task.name}),
    (uint8*)${task.name}_Stack,
    ${task.name.upper()}_STACK_SIZE,
##    ${realPrio(task.PRIORITY - 1)},
    ((PriorityType)${hex(~(task.PRIORITY - 1) & 0x0f)}),
    ${task.flags}
%if app.os.CC in ('BCC2','ECC2'):
    (uint8)${task.ACTIVATION},
%endif
%if task.AUTOSTART == True:
    ${getApplicationModes(task)},
%elif len(app.autostartedTasks) > 0:
    OS_AUTOSTART_NEVER,
%endif
#if defined(OS_USE_INTERNAL_RESOURCES)
    INTERNAL_RES_NONE,
#endif
},
%endfor
};

OsTCBType OS_TCB[OS_NUMBER_OF_TASKS];


/*
**
**  Resources.
**
*/
%if len(app.standardResources)>0:
const OsResourceConfigurationType OS_ResourceConf[OS_NUMBER_OF_RESOURCES] = {
%for res in app.standardResources:
     { ${hex(~(res.ceilingPriority - 1) & 0x0f)} },
%if res.description:
  /* ${res.name} [${res.description}] */
%else:
  /* ${res.name} */
%endif
%endfor
};

/* Dynamic parameters of Resources*/
OsResourceType Os_Resources[OS_NUMBER_OF_RESOURCES];
%endif

%if len(app.internalResources)>0:
const OsResourceConfigurationType OS_IntResourceConf[OS_NUMBER_OF_INT_RESOURCES + 1] = {
    { PRIO_SCHEDULER },    /* Index #0 ==> PRIO_SCHEDULER */
%for res in app.internalResources:
    { ${hex(~(res.ceilingPriority - 1) & 0x0f)} },
%if res.description:
  /* ${res.name} [${res.description}] */
%else:
  /* ${res.name} */
%endif
%endfor
};
%endif


/*
**
**  Counters.
**
*/
volatile TickType Os_CounterValues[OS_NUMBER_OF_COUNTERS];

/*
**  Counter <-> Alarm Associations.
*/
%for counter in app.counters:
static const AlarmType AlarmsFor${counter.name}[${len(alarmsForCounters[counter.name])}] = {
%for alarm in alarmsForCounters[counter.name]:
    ${alarm},
%endfor

};
%endfor

const CounterConfigurationType Os_CounterDefs[OS_NUMBER_OF_COUNTERS] = {
%for num, counter in enumerate(app.counters):
    {
        &Os_CounterValues[$num],
        {
            OSMAXALLOWEDVALUE_${counter.name},
            OSTICKSPERBASE_${counter.name},
            OSMINCYCLE_${counter.name}
        },
        (uint8)1,
        AlarmsFor${counter.name}
    },
%endfor

};


/*
**
**  Alarms.
**
*/
volatile OSAlarm OS_AlarmValue[OS_NUMBER_OF_ALARMS];
<% alarmsEvents = filter(lambda x: x.ACTION.value == 'SETEVENT', app.alarms) %>
%if alarmsEvents:
static const AlarmSetEventType alarmsEvents[${len(alarmsEvents)}] = {
%for num, alarmsEvent in enumerate(alarmsEvents):
<% alarmsEvent.pos = num %>
    { ${alarmsEvent.ACTION.TASK}, ${alarmsEvent.ACTION.EVENT} },
%endfor
};
%endif

const AlarmConfigurationType OS_AlarmConf[OS_NUMBER_OF_ALARMS] = {
%for num, alarm in enumerate(app.alarms):
    {
        ${alarm.COUNTER},
        ##${alarmAction(alarm)},        # STRANGE ERROR!!!
%if alarm.AUTOSTART == True:
        ${getApplicationModes(alarm)}0,
        (TickType)${alarm.AUTOSTART.ALARMTIME},
        (TickType)${alarm.AUTOSTART.CYCLETIME}
%elif len(app.autostartedAlarms) > 0:
        OS_AUTOSTART_NEVER,
        (TickType)0,
        (TickType)0
%endif
    },
%endfor
};


%if len(app.internalMessages) > 0 or len(app.externalMessages) > 0:
/*
**
**  COM.
**
*/
%for msg in app.internalMessages:
%if hasattr(msg.MESSAGEPROPERTY, 'SENDINGMESSAGE'):
<% sendingMessage = filter(lambda m: m.name == msg.MESSAGEPROPERTY.SENDINGMESSAGE, app.internalMessages)[0] %>
static ${sendingMessage.MESSAGEPROPERTY.CDATATYPE.strip('"')} Msg_Value_${msg.name} /* SM: ${sendingMessage.name}  */;
%endif
%endfor

const Com_MessageObjectType Com_MessageObjects[COM_NUMBER_OF_INTERNAL_MESSAGES + COM_NUMBER_OF_EXTERNAL_MESSAGES] = {
##    {SEND_STATIC_INTERNAL,COM_NOTIFY_NONE,(void*)NULL,4,(const ApplicationDataRef *)
##        NULL,(uint8)1,(ComReceiverType*)&Message_Receive_Receiver},
##
##    {RECEIVE_UNQUEUED_INTERNAL,COM_SETEVENT,(void*)&Evt_Message_Receive,4,(const ApplicationDataRef *)
##        &MsgDataReceive,(uint8)0,(ComReceiverType*)NULL},
##
%for msg in app.internalMessages:
    {   /* $msg.name */
        ${msg.MESSAGEPROPERTY}
        ${mapNotification}(${msg.NOTIFICATION}),
        { (void *)NULL },
%if hasattr(msg.MESSAGEPROPERTY, 'CDATATYPE'):
        sizeof(${msg.MESSAGEPROPERTY.CDATATYPE.strip('"')}),
%else:
        ((uint8)0), /* Received Message. */
%endif
%if hasattr(msg.MESSAGEPROPERTY, 'SENDINGMESSAGE'):
<% sendingMessage = filter(lambda m: m.name == msg.MESSAGEPROPERTY.SENDINGMESSAGE, app.internalMessages)[0] %>
        (const ApplicationDataRef *)&Msg_Value_${msg.name},
%else:
        (const ApplicationDataRef *)NULL,
%endif
        (uint8)0,
        (Com_ReceiverType *)NULL,
    },
%endfor
};

%endif


/*
**
**  Scheduler.
**
*/
static TaskType MLQ_QueueData[OS_MLQ_QUEUE_SIZE];

const OsMLQ_QueueConfigurationType MLQ_QueueDef[OS_MLQ_NUMBER_OF_PRIORITIES] = {
<%
offset = 0
priorities = list(info.priorityMap.values())
%>
%for num in range(info.numberOfDistinctPriorities):
<% activations = priorities[num][1] %>
##    *** $priorities[$num] ***
    { (uint8)${activations}, &MLQ_QueueData[${offset}] },
<% offset = offset + activations %>
%endfor
};


/*
**  ISR2-Wrapper.
*/
%for counter in app.counters:
%if counter.TYPE == 'HARDWARE':
IMPLEMENT_ISR2_VECTOR(${counter.TYPE.DRIVER}Timer)
%endif
%endfor
%for isr in app.isrs:
%if isr.CATEGORY == 2:
IMPLEMENT_ISR2_VECTOR(${isr.name})
%endif
%endfor

