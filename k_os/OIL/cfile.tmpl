/*
   k_os (Konnex Operating-System based on the OSEK/VDX-Standard).

   (C) 2007-2012 by Christoph Schueler <github.com/Christoph2,
                                        cpu12.gems@googlemail.com>

   All Rights Reserved

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 of the License.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

   s. FLOSS-EXCEPTION.txt
*/
/*
**
**  !!! AUTOMATICALLY GENERATED FILE - DO NOT EDIT !!!
**
**
**  GENERATED WITH  : '${sys.argv[0]}', Part of k_os (Konnex Operating-System based on the OSEK/VDX-Standard).
**  VERSION:        : ${info.version}
**  DATE            : ${time.ctime()}
**
*/
\#include "Os_Cfg.h"
\#include "Os_Vars.h"

#def getTaskFlags($task)
    #set $flags=[]
    #if $task.get('EVENT') and $len($task.EVENT)
    #silent $flags.append('OS_TASK_ATTR_EXTENDED')
    #end if
    #if $task.SCHEDULE.value=='FULL'
    #silent $flags.append('OS_TASK_ATTR_FULLPREEMPT')
    #end if
    #if $flags
    ${'|'.join($flags)},#slurp
    #else
    ((uint8)0x00),#slurp
    #end if
#end def
#def alarmAction($alarm)
#if $alarm.ACTION.value=='ACTIVATETASK'
#set $action='ALM_ACTIVATETASK,\n        (void*)'+$alarm.ACTION.TASK.value   ## (TaskType)
#elif $alarm.ACTION.value=='SETEVENT'
#set $action='ALM_SETEVENT,\n        (void*)&alarmsEvents['+str($alarm.pos)+']'
#elif $alarm.ACTION.value=='ALARMCALLBACK'
#set $action='ALM_CALLBACK,\n        (void*)GetAlarmCallbackName('+$alarm.ACTION.ALARMCALLBACKNAME.value+')'
#end if
$action#slurp
#end def
#def realPrio($p)
#set $prio=hex(~$p & 0x0f)
((PriorityType)$prio)#slurp
#end def
/*
**
**  Tasks.
**
*/
#*
    Hinweis: ein reines Single-Stack-System benoetigt keinen seperaten Interrupt-Stack!!!
*#
#for $task in $app.tasks
uint8 ${task.name}_Stack[${task.name.upper}_STACK_SIZE];
#end for

uint8 ISR_Stack[ISR_STACK_SIZE];
uint8 IdleTask_Stack[IDLE_TASK_STACK_SIZE];

const OsTaskConfigurationType OS_TaskConf[OS_NUMBER_OF_TASKS]={
{
    GetTaskName(OsExec_IdleTask),
    (uint8*)IdleTask_Stack,
    IDLE_TASK_STACK_SIZE,
    ((PriorityType)0),
    OS_TASK_ATTR_FULLPREEMPT,
    #if $app.os.CC.value in ('BCC2','ECC2')
    (uint8)1,
    #end if
#if $len($info.autostartedTasks)>0
    OS_AUTOSTART_ALWAYS,
#end if
\#if defined(OS_USE_INTERNAL_RESOURCES)
    INTERNAL_RES_NONE,
\#endif
},
#for $task in $app.tasks
{
    GetTaskName($task.name),
    (uint8*)${task.name}_Stack,
    ${task.name.upper}_STACK_SIZE,
    $realPrio($task.PRIORITY.value-1),
$getTaskFlags($task)
#if $app.os.CC.value in ('BCC2','ECC2')
    (uint8)$task.ACTIVATION.value,
#end if
#if $task.AUTOSTART.value==True
    $getApplicationModes($task),
## #elif $len($info.autostartedTasks)>0
#else
    OS_AUTOSTART_NEVER,
#end if
\#if defined(OS_USE_INTERNAL_RESOURCES)
    INTERNAL_RES_NONE /*INTERNAL_RES_SCHEDULER - besser: INTERNAL_NONPREEMPT_SCHEDULER*/,
\#endif
},
#end for
};

OsTCBType OS_TCB[OS_NUMBER_OF_TASKS];
#if $info.useResources

/*
**
**  Resources.
**
*/
#if $len($app.standardResources)>0
const OsResourceConfigurationType OS_ResourceConf[OS_NUMBER_OF_RESOURCES]={
#for $res in $app.standardResources
    {$realPrio($res.ceilingPriority-1)},#slurp
#if $res.description
  /* $res.name [$res.description] */
#else
  /* $res.name */
#end if
#end for
};

/* Dynamic parameters of Resources*/
OsResourceType Os_Resources[OS_NUMBER_OF_RESOURCES];
#end if

#if $len($app.internalResources)>0
const OsResourceConfigurationType OS_IntResourceConf[OS_NUMBER_OF_INT_RESOURCES+1]={
    {PRIO_SCHEDULER},    /* Index #0 ==> PRIO_SCHEDULER */
#for $res in $app.internalResources
    {$realPrio($res.ceilingPriority-1)},#slurp
#if $res.description
  /* $res.name [$res.description] */
#else
  /* $res.name */
#end if
#end for
};
#end if
#end if  /* $info.useResources */

/*
**
**  Counters.
**
*/
volatile TickType Os_CounterValues[OS_NUMBER_OF_COUNTERS];

/*
**  Counter <-> Alarm Associations.
*/
#for $counter in $app.counters
static const AlarmType AlarmsFor${counter.name}[$len($alarmsForCounters[$counter.name])]={
#for $alarm in $alarmsForCounters[$counter.name]
    $alarm,
#end for
};

#end for
const CounterConfigurationType Os_CounterDefs[OS_NUMBER_OF_COUNTERS]={
#for $num,$counter in $enumerate($app.counters)
    {
        &Os_CounterValues[$num],
        {
            OSMAXALLOWEDVALUE_${counter.name},
            OSTICKSPERBASE_${counter.name},
            OSMINCYCLE_${counter.name}
        },
        (uint8)1,
        AlarmsFor${counter.name}
    },
#end for
};


/*
**
**  Alarms.
**
*/
volatile OSAlarm OS_AlarmValue[OS_NUMBER_OF_ALARMS];

#set $alarmsEvents=filter(lambda x: x['ACTION'].value=='SETEVENT',$app.alarms)
#if $alarmsEvents
static const AlarmSetEventType alarmsEvents[$len($alarmsEvents)]={
#for $num,$alarmsEvent in $enumerate($alarmsEvents)
#set $alarmsEvent.pos=$num
    {$alarmsEvent.ACTION.TASK.value,$alarmsEvent.ACTION.EVENT.value},
#end for
};
#end if

const AlarmConfigurationType OS_AlarmConf[OS_NUMBER_OF_ALARMS]={
#for $num,$alarm in $enumerate($app.alarms)
    {
        $alarm.COUNTER.value,
        $alarmAction($alarm),
#if $alarm.AUTOSTART.value==True
        $getApplicationModes($alarm),
        (TickType)$alarm.AUTOSTART.ALARMTIME.value,
        (TickType)$alarm.AUTOSTART.CYCLETIME.value
#elif $len($info.autostartedAlarms)>0
        OS_AUTOSTART_NEVER,
        (TickType)0,
        (TickType)0
#end if
    },
#end for
};


/*
**
**  Scheduler.
**
*/
static TaskType MLQ_QueueData[OS_MLQ_QUEUE_SIZE];

const OsMLQ_QueueConfigurationType MLQ_QueueDef[OS_MLQ_NUMBER_OF_PRIORITIES]={
#set $offset=0
#set $priorities=list($info['priorityMap'].values())
#for $num in $range($info.numberOfDistinctPriorities)
#set $activations=$priorities[$num][1]
##    *** $priorities[$num] ***
    {(uint8)$activations,&MLQ_QueueData[$offset]},
#set $offset=$offset+$activations
#end for
};


/*
**  ISR2-Wrapper.
*/
#for $counter in $app.counters
#if $counter.TYPE.value=='HARDWARE'
IMPLEMENT_ISR2_VECTOR(${counter.TYPE.DRIVER.value}Timer)
#end if
#end for
#for $isr in $app.isrs
#if $isr.CATEGORY.value==2
IMPLEMENT_ISR2_VECTOR(${isr.name})
#end if
#end for

